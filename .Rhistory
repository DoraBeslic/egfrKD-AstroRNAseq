pwd
ls
pwd
getwd()
# Define the group labels (make sure they match your experimental design)
# Here we assume the control group comes first, followed by the experimental group
groups <- factor(c(rep("Control", ncol(control_counts)), rep("Experimental", ncol(experimental_counts))))
source("~/workspace/explore/dge_analysis.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
source("~/workspace/explore/dge_analysis.R")
experimental_counts <- read.table(experimental_counts_file, header=TRUE, row.names=1)
source("~/workspace/explore/dge_analysis.R")
View(control_counts)
library(edgeR)
# Define paths to your featureCounts files
control_counts_file <- "/Users/isidorabeslic/workspace/explore/results/feature_counts/SRR31277432.counts.txt"
experimental_counts_file <- "/Users/isidorabeslic/workspace/explore/results/feature_counts/SRR31277437.counts.txt"
# Read in the count data from the featureCounts files
control_counts <- read.table(control_counts_file, header=TRUE, row.names=1)
experimental_counts <- read.table(experimental_counts_file, header=TRUE, row.names=1)
# Step 3: Confirm that the gene names (row names) are the same in both files
if(!identical(rownames(control_counts), rownames(experimental_counts))) {
stop("Gene names (rows) do not match between the two files!")
}
# Combine control and experimental counts into a single matrix
counts <- cbind(control_counts, experimental_counts)
View(counts)
groups
# Create a DGEList object
dge <- DGEList(counts=counts, group=groups)
# Filter lowly expressed genes (optional but recommended)
dge <- dge[rowSums(cpm(dge) > 1) > 0,]
# Design matrix (group assignment)
design <- model.matrix(~ groups)
View(design)
cat("Number of samples in count matrix:", ncol(dge$counts), "\n")
View(dge)
head(control_counts)
# Combine control and experimental counts into a single matrix
all_counts <- cbind(control_counts[, 7], experimental_counts[, 7])  # Assuming the counts are in column 7
#!/usr/bin/env Rscript
# Load necessary libraries
library(edgeR)
# Define paths to your featureCounts files
control_counts_file <- "/Users/isidorabeslic/workspace/explore/results/feature_counts/SRR31277432.counts.txt"
experimental_counts_file <- "/Users/isidorabeslic/workspace/explore/results/feature_counts/SRR31277437.counts.txt"
# Read in the count data from the featureCounts files
control_counts <- read.table(control_counts_file, header=TRUE, row.names=1)
experimental_counts <- read.table(experimental_counts_file, header=TRUE, row.names=1)
# Step 3: Confirm that the gene names (row names) are the same in both files
if(!identical(rownames(control_counts), rownames(experimental_counts))) {
stop("Gene names (rows) do not match between the two files!")
}
# Combine control and experimental counts into a single matrix
all_counts <- cbind(control_counts[, 7], experimental_counts[, 7])  # Assuming the counts are in column 7
View(control_counts)
#!/usr/bin/env Rscript
# Load necessary libraries
library(edgeR)
# Define paths to your featureCounts files
control_counts_file <- "/Users/isidorabeslic/workspace/explore/results/feature_counts/SRR31277432.counts.txt"
experimental_counts_file <- "/Users/isidorabeslic/workspace/explore/results/feature_counts/SRR31277437.counts.txt"
# Read in the count data from the featureCounts files
control_counts <- read.table(control_counts_file, header=TRUE, row.names=1)
experimental_counts <- read.table(experimental_counts_file, header=TRUE, row.names=1)
# Step 3: Confirm that the gene names (row names) are the same in both files
if(!identical(rownames(control_counts), rownames(experimental_counts))) {
stop("Gene names (rows) do not match between the two files!")
}
# Combine control and experimental counts into a single matrix
all_counts <- cbind(control_counts[, 6], experimental_counts[, 6])  # Assuming the counts are in column 7
colnames(all_counts) <- c("Control", "Experimental")
View(all_counts)
# Step 3: Filter out genes with zero counts in both conditions
all_counts <- all_counts[rowSums(all_counts) > 0, ]
View(all_counts)
# Define the group labels (make sure they match your experimental design)
# Here we assume the control group comes first, followed by the experimental group
groups <- factor(c(rep("Control", 1), rep("Experimental", 1)))
# Create a DGEList object
dge <- DGEList(counts=counts, group=groups)
# Filter lowly expressed genes (optional but recommended)
dge <- dge[rowSums(cpm(dge) > 1) > 0,]
# Normalize the data
dge <- calcNormFactors(dge)
# Design matrix (group assignment)
design <- model.matrix(~ groups)
cat("Number of samples in count matrix:", ncol(dge$counts), "\n")
cat("Length of groups factor:", length(groups), "\n")
cat("Rows in design matrix:", nrow(design), "\n")
# Estimate dispersion and fit the model
dge <- estimateDisp(dge, design)
fit <- glmFit(dge, design)
# Set directory to current working directory
data_dir <- "results/feature_counts"
files <- mixedsort(list.files(data_dir, pattern = "SRR285.*\\.counts\\.txt$", full.names = TRUE))
files <- mixedsort(list.files(data_dir, pattern = "SRR285.*\\.counts\\.txt$", full.names = TRUE))
# Extract sample names from file names
sample_names <- gsub("\\.counts\\.txt$", "", basename(files))
# Print the samples being analyzed
cat("Analyzing the following samples:\n")
print(sample_names)
# Extract sample names from file names
sample_names <- gsub("\\.counts\\.txt$", "", basename(files))
# Extract sample names from file names
sample_names <- gsub("\\.counts\\.txt$", "", basename(files))
clear
source("~/workspace/explore/dge_analysis.R")
View(count_list)
View(sample_names)
files
View(df)
View(df)
View(expr_matrix)
View(count_list)
View(count_list)
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
View(expr_df)
View(dge)
View(dge_results)
source("~/workspace/explore/dge_analysis.R")
View(dge)
View(design)
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
install.packages(c("ggplot2", "ggrepel"))
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
View(dge_results)
View(dge_results)
View(results_df)
source("~/workspace/explore/dge_analysis.R")
View(results_df)
View(design_matrix)
source("~/workspace/explore/dge_analysis.R")
View(results_df)
View(design_matrix)
View(design_matrix)
View(design)
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
View(design_matrix)
View(counts_matrix)
View(counts_list)
View(counts_by_group)
View(collapsed_design)
source("~/workspace/explore/dge_analysis.R")
View(dge)
View(counts_matrix)
View(counts_list)
View(counts_matrix)
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
View(counts_by_group)
source("~/workspace/explore/dge_analysis.R")
View(counts_by_group)
View(counts_by_group)
View(group_design)
View(design_matrix)
View(counts_matrix)
View(design_matrix)
View(counts_by_group)
source("~/workspace/explore/dge_analysis.R")
View(counts_by_group)
View(counts_by_group)
View(dge)
View(design_matrix)
View(dge)
View(results_df)
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
View(volcano)
View(volcano)
View(volcano)
View(volcano)
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
View(dge)
source("~/workspace/explore/dge_analysis.R")
View(group_design)
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
View(de_genes)
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Mm.eg.db")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Mm.eg.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Mm.eg.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Mm.eg.db")
clear
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
View(dge_results)
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
View(msigdbr_df)
View(gsea_result)
View(msig_gene_sets)
View(msig_gene_sets)
View(gsea_result)
View(dge_results)
View(msig_gene_sets)
View(dge_results)
source("~/workspace/explore/gsea_analysis.R")
length(intersect(names(gene_list), msig_gene_sets$ensembl_gene))
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
View(gsea_result_reactome)
View(reactome_gene_sets)
source("~/workspace/explore/gsea_analysis.R")
if (target_gene_set %in% reactome_gene_set_names) {
message(paste(target_gene_set, "is present in Reactome gene sets."))
} else {
message(paste(target_gene_set, "NOT found in Reactome gene sets."))
}
all_msigdbr <- msigdbr(species = "Mus musculus")
all_sets <- unique(all_msigdbr$gs_name)
grep("RECEPTOR_TYPE_PROTEIN_TYROSINE", all_sets, value = TRUE, ignore.case = TRUE)
source("~/workspace/explore/gsea_analysis.R")
msigdbr_collections()
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
View(reactome_gene_sets)
View(gsea_result)
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
View(gsea_df)
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
View(reactome_gene_sets)
subset(reactome_gene_sets, grepl("tyrosine", gs_name, ignore.case = TRUE))
subset(reactome_gene_sets, grepl("tyrosine_phosphotases", gs_name, ignore.case = TRUE))
subset(reactome_gene_sets, grepl("tyrosine_phosphatases", gs_name, ignore.case = TRUE))
subset(reactome_gene_sets, grepl("phosphatases", gs_name, ignore.case = TRUE))
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/explore/dge_analysis.R")
source("~/workspace/explore/gsea_analysis.R")
source("~/workspace/egfrKD-AstroRNAseq/src/dge_analysis.R")
source("~/workspace/egfrKD-AstroRNAseq/src/dge_analysis.R")
source("~/workspace/egfrKD-AstroRNAseq/src/gsea_analysis.R")
